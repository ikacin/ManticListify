{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.rotationToNormal = void 0;\nvar components_1 = require(\"../components\");\nvar math_1 = require(\"../systems/math\");\n/**\r\n * Converts the specified euler rotation (in degrees) into the corresponding normal vector.\r\n *\r\n * @remarks\r\n * The normal is calculated by placing a (figurative) plane in a coordinate-system's\r\n * origin, and rotating it by the specified angles. Note that the z-component of the\r\n * rotation is irrelevant for the normal and can be ignored. Then, two vectors\r\n * describing the orientation of the plane are calculated. Their cross product\r\n * denotes the normal vector.\r\n *\r\n * @param rotation The euler rotation angles (in degrees) to calculate the normal for.\r\n */\nfunction rotationToNormal(rotation) {\n  var alpha = rotation.x * math_1.deg2rad;\n  var beta = rotation.y * math_1.deg2rad;\n  var a = new components_1.Vector(Math.cos(beta), 0, Math.sin(beta));\n  var b = new components_1.Vector(0, Math.cos(alpha), Math.sin(alpha));\n  return a.cross(b);\n}\nexports.rotationToNormal = rotationToNormal;","map":{"version":3,"names":["Object","defineProperty","exports","value","rotationToNormal","components_1","require","math_1","rotation","alpha","x","deg2rad","beta","y","a","Vector","Math","cos","sin","b","cross"],"sources":["C:/works/react-test/node_modules/party-js/lib/util/rotation.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.rotationToNormal = void 0;\r\nvar components_1 = require(\"../components\");\r\nvar math_1 = require(\"../systems/math\");\r\n/**\r\n * Converts the specified euler rotation (in degrees) into the corresponding normal vector.\r\n *\r\n * @remarks\r\n * The normal is calculated by placing a (figurative) plane in a coordinate-system's\r\n * origin, and rotating it by the specified angles. Note that the z-component of the\r\n * rotation is irrelevant for the normal and can be ignored. Then, two vectors\r\n * describing the orientation of the plane are calculated. Their cross product\r\n * denotes the normal vector.\r\n *\r\n * @param rotation The euler rotation angles (in degrees) to calculate the normal for.\r\n */\r\nfunction rotationToNormal(rotation) {\r\n    var alpha = rotation.x * math_1.deg2rad;\r\n    var beta = rotation.y * math_1.deg2rad;\r\n    var a = new components_1.Vector(Math.cos(beta), 0, Math.sin(beta));\r\n    var b = new components_1.Vector(0, Math.cos(alpha), Math.sin(alpha));\r\n    return a.cross(b);\r\n}\r\nexports.rotationToNormal = rotationToNormal;\r\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,gBAAgB,GAAG,KAAK,CAAC;AACjC,IAAIC,YAAY,GAAGC,OAAO,CAAC,eAAe,CAAC;AAC3C,IAAIC,MAAM,GAAGD,OAAO,CAAC,iBAAiB,CAAC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,gBAAgBA,CAACI,QAAQ,EAAE;EAChC,IAAIC,KAAK,GAAGD,QAAQ,CAACE,CAAC,GAAGH,MAAM,CAACI,OAAO;EACvC,IAAIC,IAAI,GAAGJ,QAAQ,CAACK,CAAC,GAAGN,MAAM,CAACI,OAAO;EACtC,IAAIG,CAAC,GAAG,IAAIT,YAAY,CAACU,MAAM,CAACC,IAAI,CAACC,GAAG,CAACL,IAAI,CAAC,EAAE,CAAC,EAAEI,IAAI,CAACE,GAAG,CAACN,IAAI,CAAC,CAAC;EAClE,IAAIO,CAAC,GAAG,IAAId,YAAY,CAACU,MAAM,CAAC,CAAC,EAAEC,IAAI,CAACC,GAAG,CAACR,KAAK,CAAC,EAAEO,IAAI,CAACE,GAAG,CAACT,KAAK,CAAC,CAAC;EACpE,OAAOK,CAAC,CAACM,KAAK,CAACD,CAAC,CAAC;AACrB;AACAjB,OAAO,CAACE,gBAAgB,GAAGA,gBAAgB"},"metadata":{},"sourceType":"script","externalDependencies":[]}