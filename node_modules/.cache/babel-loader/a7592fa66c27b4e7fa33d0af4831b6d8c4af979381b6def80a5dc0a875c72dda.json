{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Renderer = void 0;\nvar __1 = require(\"..\");\nvar vector_1 = require(\"../components/vector\");\nvar containers_1 = require(\"../containers\");\nvar shapes_1 = require(\"../systems/shapes\");\nvar util_1 = require(\"../util\");\n/**\r\n * Represents a renderer used to draw particles to the DOM via HTML\r\n * elements. Additionally, it is responsible for purging the elements\r\n * of destroyed particles from the DOM.\r\n */\nvar Renderer = /** @class */function () {\n  function Renderer() {\n    /**\r\n     * The lookup of elements currently handled by the renderer, with the\r\n     * particle ID as key and a HTMLElement as the value.\r\n     */\n    this.elements = new Map();\n    /**\r\n     * The normalized direction the light comes from.\r\n     */\n    this.light = new vector_1.Vector(0, 0, 1);\n    /**\r\n     * Whether or not the renderer should actually draw particles.\r\n     */\n    this.enabled = true;\n    // Respect that users might prefer reduced motion.\n    // See: https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-motion\n    this.enabled = !__1.settings.respectReducedMotion || !window.matchMedia(\"(prefers-reduced-motion)\").matches;\n  }\n  /**\r\n   * Begins a new render block. During the rendering phase, a list of rendered particles\r\n   * is tracked, so that stale particles can be removed later.\r\n   */\n  Renderer.prototype.begin = function () {\n    this.renderedParticles = [];\n  };\n  /**\r\n   * Terminates an existing render block. This checks which particles were rendered\r\n   * during the block and purges all unused HTMLElements from the DOM.\r\n   *\r\n   * @returns The amount of particles that were rendered.\r\n   */\n  Renderer.prototype.end = function () {\n    var it = this.elements.keys();\n    var result = it.next();\n    while (!result.done) {\n      var id = result.value;\n      if (!this.renderedParticles.includes(id)) {\n        this.elements.get(id).remove();\n        this.elements.delete(id);\n      }\n      result = it.next();\n    }\n    return this.renderedParticles.length;\n  };\n  /**\r\n   * Renders an individual particle to the DOM. If the particle is rendered for the first\r\n   * time, a HTMLElement will be created using the emitter's render settings.\r\n   *\r\n   * @param particle The particle to be rendered.\r\n   * @param emitter The system containing the particle.\r\n   */\n  Renderer.prototype.renderParticle = function (particle, emitter) {\n    if (!this.enabled) return;\n    var options = emitter.renderer;\n    // Ensure that an element for the particle exists.\n    var element = this.elements.has(particle.id) ? this.elements.get(particle.id) : this.createParticleElement(particle, options);\n    if (options.applyColor) {\n      // If the options offer a coloring method, apply it.\n      options.applyColor(particle.color, element);\n    }\n    if (options.applyOpacity) {\n      // If the options offer an opacity modifying method, apply it.\n      options.applyOpacity(particle.opacity, element);\n    }\n    if (options.applyLighting) {\n      // If the options offer a lighting method, apply it.\n      // Lighting is calculated as a combination of the particle's normal\n      // direction and the lighting direction.\n      var normal = util_1.rotationToNormal(particle.rotation);\n      var lightingCoefficient = normal.dot(this.light);\n      options.applyLighting(lightingCoefficient, element);\n    }\n    if (options.applyTransform) {\n      // If the options offer a transformation method, apply it.\n      // This ensures the particle is rendered at the correct position with the correct rotation.\n      options.applyTransform(particle, element);\n    }\n    // Mark the particle as rendered.\n    this.renderedParticles.push(particle.id);\n  };\n  /**\r\n   * Creates the HTMLElement for a particle that does not have one already.\r\n   */\n  Renderer.prototype.createParticleElement = function (particle, options) {\n    // Resolve the element returned from the factory.\n    var resolved = shapes_1.resolveShapeFactory(options.shapeFactory);\n    // Clone the node to ensure we do not break existing elements.\n    var element = resolved.cloneNode(true);\n    // Ensure that the elements can be \"stacked\" ontop of eachother.\n    element.style.position = \"absolute\";\n    // Register the new element in the map, while appending the new element to the DOM.\n    this.elements.set(particle.id, containers_1.particleContainer.current.appendChild(element));\n    return element;\n  };\n  return Renderer;\n}();\nexports.Renderer = Renderer;","map":{"version":3,"names":["Object","defineProperty","exports","value","Renderer","__1","require","vector_1","containers_1","shapes_1","util_1","elements","Map","light","Vector","enabled","settings","respectReducedMotion","window","matchMedia","matches","prototype","begin","renderedParticles","end","it","keys","result","next","done","id","includes","get","remove","delete","length","renderParticle","particle","emitter","options","renderer","element","has","createParticleElement","applyColor","color","applyOpacity","opacity","applyLighting","normal","rotationToNormal","rotation","lightingCoefficient","dot","applyTransform","push","resolved","resolveShapeFactory","shapeFactory","cloneNode","style","position","set","particleContainer","current","appendChild"],"sources":["C:/works/react-test/node_modules/party-js/lib/particles/renderer.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Renderer = void 0;\r\nvar __1 = require(\"..\");\r\nvar vector_1 = require(\"../components/vector\");\r\nvar containers_1 = require(\"../containers\");\r\nvar shapes_1 = require(\"../systems/shapes\");\r\nvar util_1 = require(\"../util\");\r\n/**\r\n * Represents a renderer used to draw particles to the DOM via HTML\r\n * elements. Additionally, it is responsible for purging the elements\r\n * of destroyed particles from the DOM.\r\n */\r\nvar Renderer = /** @class */ (function () {\r\n    function Renderer() {\r\n        /**\r\n         * The lookup of elements currently handled by the renderer, with the\r\n         * particle ID as key and a HTMLElement as the value.\r\n         */\r\n        this.elements = new Map();\r\n        /**\r\n         * The normalized direction the light comes from.\r\n         */\r\n        this.light = new vector_1.Vector(0, 0, 1);\r\n        /**\r\n         * Whether or not the renderer should actually draw particles.\r\n         */\r\n        this.enabled = true;\r\n        // Respect that users might prefer reduced motion.\r\n        // See: https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-motion\r\n        this.enabled =\r\n            !__1.settings.respectReducedMotion ||\r\n                !window.matchMedia(\"(prefers-reduced-motion)\").matches;\r\n    }\r\n    /**\r\n     * Begins a new render block. During the rendering phase, a list of rendered particles\r\n     * is tracked, so that stale particles can be removed later.\r\n     */\r\n    Renderer.prototype.begin = function () {\r\n        this.renderedParticles = [];\r\n    };\r\n    /**\r\n     * Terminates an existing render block. This checks which particles were rendered\r\n     * during the block and purges all unused HTMLElements from the DOM.\r\n     *\r\n     * @returns The amount of particles that were rendered.\r\n     */\r\n    Renderer.prototype.end = function () {\r\n        var it = this.elements.keys();\r\n        var result = it.next();\r\n        while (!result.done) {\r\n            var id = result.value;\r\n            if (!this.renderedParticles.includes(id)) {\r\n                this.elements.get(id).remove();\r\n                this.elements.delete(id);\r\n            }\r\n            result = it.next();\r\n        }\r\n        return this.renderedParticles.length;\r\n    };\r\n    /**\r\n     * Renders an individual particle to the DOM. If the particle is rendered for the first\r\n     * time, a HTMLElement will be created using the emitter's render settings.\r\n     *\r\n     * @param particle The particle to be rendered.\r\n     * @param emitter The system containing the particle.\r\n     */\r\n    Renderer.prototype.renderParticle = function (particle, emitter) {\r\n        if (!this.enabled)\r\n            return;\r\n        var options = emitter.renderer;\r\n        // Ensure that an element for the particle exists.\r\n        var element = this.elements.has(particle.id)\r\n            ? this.elements.get(particle.id)\r\n            : this.createParticleElement(particle, options);\r\n        if (options.applyColor) {\r\n            // If the options offer a coloring method, apply it.\r\n            options.applyColor(particle.color, element);\r\n        }\r\n        if (options.applyOpacity) {\r\n            // If the options offer an opacity modifying method, apply it.\r\n            options.applyOpacity(particle.opacity, element);\r\n        }\r\n        if (options.applyLighting) {\r\n            // If the options offer a lighting method, apply it.\r\n            // Lighting is calculated as a combination of the particle's normal\r\n            // direction and the lighting direction.\r\n            var normal = util_1.rotationToNormal(particle.rotation);\r\n            var lightingCoefficient = normal.dot(this.light);\r\n            options.applyLighting(lightingCoefficient, element);\r\n        }\r\n        if (options.applyTransform) {\r\n            // If the options offer a transformation method, apply it.\r\n            // This ensures the particle is rendered at the correct position with the correct rotation.\r\n            options.applyTransform(particle, element);\r\n        }\r\n        // Mark the particle as rendered.\r\n        this.renderedParticles.push(particle.id);\r\n    };\r\n    /**\r\n     * Creates the HTMLElement for a particle that does not have one already.\r\n     */\r\n    Renderer.prototype.createParticleElement = function (particle, options) {\r\n        // Resolve the element returned from the factory.\r\n        var resolved = shapes_1.resolveShapeFactory(options.shapeFactory);\r\n        // Clone the node to ensure we do not break existing elements.\r\n        var element = resolved.cloneNode(true);\r\n        // Ensure that the elements can be \"stacked\" ontop of eachother.\r\n        element.style.position = \"absolute\";\r\n        // Register the new element in the map, while appending the new element to the DOM.\r\n        this.elements.set(particle.id, containers_1.particleContainer.current.appendChild(element));\r\n        return element;\r\n    };\r\n    return Renderer;\r\n}());\r\nexports.Renderer = Renderer;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}