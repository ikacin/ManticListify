{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.resolveShapeFactory = exports.resolvableShapes = void 0;\nvar variation_1 = require(\"./variation\");\n/**\r\n * Represents the lookup that maps resolveable element keys to their HTML strings.\r\n *\r\n * @remarks\r\n * The default shapes are made to fit inside a dimension of 10x10 pixels, except\r\n * the 'star' shape, which exceeds it slightly.\r\n */\nexports.resolvableShapes = {\n  square: \"<div style=\\\"height: 10px; width: 10px;\\\"></div>\",\n  rectangle: \"<div style=\\\"height: 6px; width: 10px;\\\"></div>\",\n  circle: \"<svg viewBox=\\\"0 0 2 2\\\" width=\\\"10\\\" height=\\\"10\\\"><circle cx=\\\"1\\\" cy=\\\"1\\\" r=\\\"1\\\" fill=\\\"currentColor\\\"/></svg>\",\n  roundedSquare: \"<div style=\\\"height: 10px; width: 10px; border-radius: 3px;\\\"></div>\",\n  roundedRectangle: \"<div style=\\\"height: 6px; width: 10px; border-radius: 3px;\\\"></div>\",\n  star: \"<svg viewBox=\\\"0 0 512 512\\\" width=\\\"15\\\" height=\\\"15\\\"><polygon fill=\\\"currentColor\\\" points=\\\"512,197.816 325.961,185.585 255.898,9.569 185.835,185.585 0,197.816 142.534,318.842 95.762,502.431 255.898,401.21 416.035,502.431 369.263,318.842\\\"/></svg>\"\n};\n/**\r\n * Resolves the specified element factory using the resolvable elements, if needed.\r\n */\nfunction resolveShapeFactory(factory) {\n  // Retrieve the unresolved element from the factory.\n  var shape = variation_1.evaluateVariation(factory);\n  // If a string is returned, we need to resolve the element. This means\n  // looking up the string in the resolver lookup. If the key was not\n  // resolvable, we throw an error.\n  if (typeof shape === \"string\") {\n    var resolved = exports.resolvableShapes[shape];\n    if (!resolved) {\n      throw new Error(\"Failed to resolve shape key '\" + shape + \"'. Did you forget to add it to the 'resolvableShapes' lookup?\");\n    }\n    // We're in luck, we can resolve the element! We create a dummy <div> element\n    // to set the innerHTML of, and return the first element child.\n    var dummy = document.createElement(\"div\");\n    dummy.innerHTML = resolved;\n    return dummy.firstElementChild;\n  }\n  return shape;\n}\nexports.resolveShapeFactory = resolveShapeFactory;","map":{"version":3,"names":["Object","defineProperty","exports","value","resolveShapeFactory","resolvableShapes","variation_1","require","square","rectangle","circle","roundedSquare","roundedRectangle","star","factory","shape","evaluateVariation","resolved","Error","dummy","document","createElement","innerHTML","firstElementChild"],"sources":["C:/works/react-test/node_modules/party-js/lib/systems/shapes.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.resolveShapeFactory = exports.resolvableShapes = void 0;\r\nvar variation_1 = require(\"./variation\");\r\n/**\r\n * Represents the lookup that maps resolveable element keys to their HTML strings.\r\n *\r\n * @remarks\r\n * The default shapes are made to fit inside a dimension of 10x10 pixels, except\r\n * the 'star' shape, which exceeds it slightly.\r\n */\r\nexports.resolvableShapes = {\r\n    square: \"<div style=\\\"height: 10px; width: 10px;\\\"></div>\",\r\n    rectangle: \"<div style=\\\"height: 6px; width: 10px;\\\"></div>\",\r\n    circle: \"<svg viewBox=\\\"0 0 2 2\\\" width=\\\"10\\\" height=\\\"10\\\"><circle cx=\\\"1\\\" cy=\\\"1\\\" r=\\\"1\\\" fill=\\\"currentColor\\\"/></svg>\",\r\n    roundedSquare: \"<div style=\\\"height: 10px; width: 10px; border-radius: 3px;\\\"></div>\",\r\n    roundedRectangle: \"<div style=\\\"height: 6px; width: 10px; border-radius: 3px;\\\"></div>\",\r\n    star: \"<svg viewBox=\\\"0 0 512 512\\\" width=\\\"15\\\" height=\\\"15\\\"><polygon fill=\\\"currentColor\\\" points=\\\"512,197.816 325.961,185.585 255.898,9.569 185.835,185.585 0,197.816 142.534,318.842 95.762,502.431 255.898,401.21 416.035,502.431 369.263,318.842\\\"/></svg>\",\r\n};\r\n/**\r\n * Resolves the specified element factory using the resolvable elements, if needed.\r\n */\r\nfunction resolveShapeFactory(factory) {\r\n    // Retrieve the unresolved element from the factory.\r\n    var shape = variation_1.evaluateVariation(factory);\r\n    // If a string is returned, we need to resolve the element. This means\r\n    // looking up the string in the resolver lookup. If the key was not\r\n    // resolvable, we throw an error.\r\n    if (typeof shape === \"string\") {\r\n        var resolved = exports.resolvableShapes[shape];\r\n        if (!resolved) {\r\n            throw new Error(\"Failed to resolve shape key '\" + shape + \"'. Did you forget to add it to the 'resolvableShapes' lookup?\");\r\n        }\r\n        // We're in luck, we can resolve the element! We create a dummy <div> element\r\n        // to set the innerHTML of, and return the first element child.\r\n        var dummy = document.createElement(\"div\");\r\n        dummy.innerHTML = resolved;\r\n        return dummy.firstElementChild;\r\n    }\r\n    return shape;\r\n}\r\nexports.resolveShapeFactory = resolveShapeFactory;\r\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,mBAAmB,GAAGF,OAAO,CAACG,gBAAgB,GAAG,KAAK,CAAC;AAC/D,IAAIC,WAAW,GAAGC,OAAO,CAAC,aAAa,CAAC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACAL,OAAO,CAACG,gBAAgB,GAAG;EACvBG,MAAM,EAAE,kDAAkD;EAC1DC,SAAS,EAAE,iDAAiD;EAC5DC,MAAM,EAAE,qHAAqH;EAC7HC,aAAa,EAAE,sEAAsE;EACrFC,gBAAgB,EAAE,qEAAqE;EACvFC,IAAI,EAAE;AACV,CAAC;AACD;AACA;AACA;AACA,SAAST,mBAAmBA,CAACU,OAAO,EAAE;EAClC;EACA,IAAIC,KAAK,GAAGT,WAAW,CAACU,iBAAiB,CAACF,OAAO,CAAC;EAClD;EACA;EACA;EACA,IAAI,OAAOC,KAAK,KAAK,QAAQ,EAAE;IAC3B,IAAIE,QAAQ,GAAGf,OAAO,CAACG,gBAAgB,CAACU,KAAK,CAAC;IAC9C,IAAI,CAACE,QAAQ,EAAE;MACX,MAAM,IAAIC,KAAK,CAAC,+BAA+B,GAAGH,KAAK,GAAG,+DAA+D,CAAC;IAC9H;IACA;IACA;IACA,IAAII,KAAK,GAAGC,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;IACzCF,KAAK,CAACG,SAAS,GAAGL,QAAQ;IAC1B,OAAOE,KAAK,CAACI,iBAAiB;EAClC;EACA,OAAOR,KAAK;AAChB;AACAb,OAAO,CAACE,mBAAmB,GAAGA,mBAAmB"},"metadata":{},"sourceType":"script","externalDependencies":[]}