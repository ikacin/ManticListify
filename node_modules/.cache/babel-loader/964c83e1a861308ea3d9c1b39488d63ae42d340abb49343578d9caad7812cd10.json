{"ast":null,"code":"function propToString({\n  type,\n  name,\n  value,\n  defaultValue\n}) {\n  if (value === defaultValue || name === \"children\") {\n    return \"\";\n  }\n  if (type === \"string\" && value.trim().length === 0) {\n    return \"\";\n  }\n  if (type === \"boolean\") {\n    return value ? name : `${name}={false}`;\n  }\n  if (type === \"number\") {\n    return `${name}={${value}}`;\n  }\n  return `${name}=\"${value}\"`;\n}\nconst getOffset = value => {\n  if (typeof value === \"boolean\") {\n    return \"\\n  \";\n  }\n  return `\n${Array(value).fill(\"  \").join(\"\")}`;\n};\nfunction propsToString({\n  props,\n  values,\n  multiline\n}) {\n  return props.map(prop => propToString({\n    type: prop.type,\n    name: prop.name,\n    value: values[prop.name],\n    defaultValue: prop.defaultValue\n  })).filter(Boolean).join(multiline ? getOffset(multiline) : \" \").trim();\n}\nexport { propToString, propsToString };","map":{"version":3,"names":["propToString","type","name","value","defaultValue","trim","length","getOffset","Array","fill","join","propsToString","props","values","multiline","map","prop","filter","Boolean"],"sources":["C:\\works\\react-test\\node_modules\\@mantine\\ds\\src\\Demo\\Configurator\\props-to-string.ts"],"sourcesContent":["import { ControlType, ControlProps } from './controls';\n\ninterface PropToString {\n  type: ControlType;\n  name: string;\n  value: any;\n  defaultValue: any;\n}\n\nexport function propToString({ type, name, value, defaultValue }: PropToString) {\n  if (value === defaultValue || name === 'children') {\n    return '';\n  }\n\n  if (type === 'string' && value.trim().length === 0) {\n    return '';\n  }\n\n  if (type === 'boolean') {\n    return value ? name : `${name}={false}`;\n  }\n\n  if (type === 'number') {\n    return `${name}={${value}}`;\n  }\n\n  return `${name}=\"${value}\"`;\n}\n\ninterface PropsToString {\n  props: ControlProps[];\n  values: Record<string, any>;\n  multiline: boolean | number;\n}\n\nconst getOffset = (value: boolean | number) => {\n  if (typeof value === 'boolean') {\n    return '\\n  ';\n  }\n\n  return `\\n${Array(value).fill('  ').join('')}`;\n};\n\nexport function propsToString({ props, values, multiline }: PropsToString) {\n  return props\n    .map((prop) =>\n      propToString({\n        type: prop.type,\n        name: prop.name,\n        value: values[prop.name],\n        defaultValue: prop.defaultValue,\n      })\n    )\n    .filter(Boolean)\n    .join(multiline ? getOffset(multiline) : ' ')\n    .trim();\n}\n"],"mappings":"AAAO,SAASA,YAAYA,CAAC;EAAEC,IAAI;EAAEC,IAAI;EAAEC,KAAK;EAAEC;AAAY,CAAE,EAAE;EAChE,IAAID,KAAK,KAAKC,YAAY,IAAIF,IAAI,KAAK,UAAU,EAAE;IACjD,OAAO,EAAE;EACb;EACE,IAAID,IAAI,KAAK,QAAQ,IAAIE,KAAK,CAACE,IAAI,EAAE,CAACC,MAAM,KAAK,CAAC,EAAE;IAClD,OAAO,EAAE;EACb;EACE,IAAIL,IAAI,KAAK,SAAS,EAAE;IACtB,OAAOE,KAAK,GAAGD,IAAI,GAAI,GAAEA,IAAK,UAAS;EAC3C;EACE,IAAID,IAAI,KAAK,QAAQ,EAAE;IACrB,OAAQ,GAAEC,IAAK,KAAIC,KAAM,GAAE;EAC/B;EACE,OAAQ,GAAED,IAAK,KAAIC,KAAM,GAAE;AAC7B;AACA,MAAMI,SAAS,GAAIJ,KAAK,IAAK;EAC3B,IAAI,OAAOA,KAAK,KAAK,SAAS,EAAE;IAC9B,OAAO,MAAM;EACjB;EACE,OAAQ;AACV,EAAEK,KAAK,CAACL,KAAK,CAAC,CAACM,IAAI,CAAC,IAAI,CAAC,CAACC,IAAI,CAAC,EAAE,CAAE,EAAC;AACpC,CAAC;AACM,SAASC,aAAaA,CAAC;EAAEC,KAAK;EAAEC,MAAM;EAAEC;AAAS,CAAE,EAAE;EAC1D,OAAOF,KAAK,CAACG,GAAG,CAAEC,IAAI,IAAKhB,YAAY,CAAC;IACtCC,IAAI,EAAEe,IAAI,CAACf,IAAI;IACfC,IAAI,EAAEc,IAAI,CAACd,IAAI;IACfC,KAAK,EAAEU,MAAM,CAACG,IAAI,CAACd,IAAI,CAAC;IACxBE,YAAY,EAAEY,IAAI,CAACZ;EACvB,CAAG,CAAC,CAAC,CAACa,MAAM,CAACC,OAAO,CAAC,CAACR,IAAI,CAACI,SAAS,GAAGP,SAAS,CAACO,SAAS,CAAC,GAAG,GAAG,CAAC,CAACT,IAAI,EAAE;AACzE"},"metadata":{},"sourceType":"module","externalDependencies":[]}