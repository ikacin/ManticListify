{"ast":null,"code":"\"use strict\";\n\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];\n  return to;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Debug = void 0;\nvar containers_1 = require(\"./containers\");\nvar settings_1 = require(\"./settings\");\n/**\r\n * Represents a utility module to view debug information inside the DOM.\r\n * This is disabled by default and needs to manually be enabled by setting\r\n * the '.enabled' field to true.\r\n *\r\n * While disabled, the utility will not fetch stats and update itself.\r\n */\nvar Debug = /** @class */function () {\n  /**\r\n   * Registers a new debug utility that is attached to the given scene.\r\n   *\r\n   * @param scene The scene to attach to.\r\n   */\n  function Debug(scene) {\n    this.scene = scene;\n    /**\r\n     * The rate at which the debug interface should refresh itself (per second).\r\n     */\n    this.refreshRate = 8;\n    /**\r\n     * The timer counting down to refreshes.\r\n     */\n    this.refreshTimer = 1 / this.refreshRate;\n  }\n  /**\r\n   * Processes a tick event in the interface. This checks if enough has passed to\r\n   * trigger a refresh, and if so, fetches the debug information and updates the DOM.\r\n   *\r\n   * @param delta The time that has elapsed since the last tick.\r\n   */\n  Debug.prototype.tick = function (delta) {\n    var container = containers_1.debugContainer.current;\n    // If the current display style does not match the style inferred from the\n    // enabled-state, update it.\n    var displayStyle = settings_1.settings.debug ? \"block\" : \"none\";\n    if (container.style.display !== displayStyle) {\n      container.style.display = displayStyle;\n    }\n    if (!settings_1.settings.debug) {\n      // If the interface is not enabled, don't fetch or update any infos.\n      return;\n    }\n    this.refreshTimer += delta;\n    if (this.refreshTimer > 1 / this.refreshRate) {\n      this.refreshTimer = 0;\n      // Update the container with the fetched information joined on line breaks.\n      container.innerHTML = this.getDebugInformation(delta).join(\"<br>\");\n    }\n  };\n  /**\r\n   * Fetches the debug information from the specified delta and the linked scene.\r\n   *\r\n   * @returns An array of debugging information, formatted as HTML.\r\n   */\n  Debug.prototype.getDebugInformation = function (delta) {\n    // Count emitters and particles.\n    var emitters = this.scene.emitters.length;\n    var particles = this.scene.emitters.reduce(function (acc, cur) {\n      return acc + cur.particles.length;\n    }, 0);\n    var infos = [\"<b>party.js Debug</b>\", \"--------------\", \"FPS: \" + Math.round(1 / delta), \"Emitters: \" + emitters, \"Particles: \" + particles];\n    // Emitter informations are formatted using their index, internal timer\n    // and total particle count.\n    var emitterInfos = this.scene.emitters.map(function (emitter) {\n      return [\n      // Show the current loop and the total loops.\n      \"\\u2B6F: \" + (emitter[\"currentLoop\"] + 1) + \"/\" + (emitter.options.loops >= 0 ? emitter.options.loops : \"∞\"),\n      // Show the amount of particle contained.\n      \"\\u03A3p: \" + emitter.particles.length,\n      // Show the internal timer.\n      !emitter.isExpired ? \"\\u03A3t: \" + emitter[\"durationTimer\"].toFixed(3) + \"s\" : \"<i>expired</i>\"].join(\", \");\n    });\n    infos.push.apply(infos, __spreadArray([\"--------------\"], emitterInfos));\n    return infos;\n  };\n  return Debug;\n}();\nexports.Debug = Debug;","map":{"version":3,"names":["__spreadArray","to","from","i","il","length","j","Object","defineProperty","exports","value","Debug","containers_1","require","settings_1","scene","refreshRate","refreshTimer","prototype","tick","delta","container","debugContainer","current","displayStyle","settings","debug","style","display","innerHTML","getDebugInformation","join","emitters","particles","reduce","acc","cur","infos","Math","round","emitterInfos","map","emitter","options","loops","isExpired","toFixed","push","apply"],"sources":["C:/works/react-test/node_modules/party-js/lib/debug.js"],"sourcesContent":["\"use strict\";\r\nvar __spreadArray = (this && this.__spreadArray) || function (to, from) {\r\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\r\n        to[j] = from[i];\r\n    return to;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Debug = void 0;\r\nvar containers_1 = require(\"./containers\");\r\nvar settings_1 = require(\"./settings\");\r\n/**\r\n * Represents a utility module to view debug information inside the DOM.\r\n * This is disabled by default and needs to manually be enabled by setting\r\n * the '.enabled' field to true.\r\n *\r\n * While disabled, the utility will not fetch stats and update itself.\r\n */\r\nvar Debug = /** @class */ (function () {\r\n    /**\r\n     * Registers a new debug utility that is attached to the given scene.\r\n     *\r\n     * @param scene The scene to attach to.\r\n     */\r\n    function Debug(scene) {\r\n        this.scene = scene;\r\n        /**\r\n         * The rate at which the debug interface should refresh itself (per second).\r\n         */\r\n        this.refreshRate = 8;\r\n        /**\r\n         * The timer counting down to refreshes.\r\n         */\r\n        this.refreshTimer = 1 / this.refreshRate;\r\n    }\r\n    /**\r\n     * Processes a tick event in the interface. This checks if enough has passed to\r\n     * trigger a refresh, and if so, fetches the debug information and updates the DOM.\r\n     *\r\n     * @param delta The time that has elapsed since the last tick.\r\n     */\r\n    Debug.prototype.tick = function (delta) {\r\n        var container = containers_1.debugContainer.current;\r\n        // If the current display style does not match the style inferred from the\r\n        // enabled-state, update it.\r\n        var displayStyle = settings_1.settings.debug ? \"block\" : \"none\";\r\n        if (container.style.display !== displayStyle) {\r\n            container.style.display = displayStyle;\r\n        }\r\n        if (!settings_1.settings.debug) {\r\n            // If the interface is not enabled, don't fetch or update any infos.\r\n            return;\r\n        }\r\n        this.refreshTimer += delta;\r\n        if (this.refreshTimer > 1 / this.refreshRate) {\r\n            this.refreshTimer = 0;\r\n            // Update the container with the fetched information joined on line breaks.\r\n            container.innerHTML = this.getDebugInformation(delta).join(\"<br>\");\r\n        }\r\n    };\r\n    /**\r\n     * Fetches the debug information from the specified delta and the linked scene.\r\n     *\r\n     * @returns An array of debugging information, formatted as HTML.\r\n     */\r\n    Debug.prototype.getDebugInformation = function (delta) {\r\n        // Count emitters and particles.\r\n        var emitters = this.scene.emitters.length;\r\n        var particles = this.scene.emitters.reduce(function (acc, cur) { return acc + cur.particles.length; }, 0);\r\n        var infos = [\r\n            \"<b>party.js Debug</b>\",\r\n            \"--------------\",\r\n            \"FPS: \" + Math.round(1 / delta),\r\n            \"Emitters: \" + emitters,\r\n            \"Particles: \" + particles,\r\n        ];\r\n        // Emitter informations are formatted using their index, internal timer\r\n        // and total particle count.\r\n        var emitterInfos = this.scene.emitters.map(function (emitter) {\r\n            return [\r\n                // Show the current loop and the total loops.\r\n                \"\\u2B6F: \" + (emitter[\"currentLoop\"] + 1) + \"/\" + (emitter.options.loops >= 0 ? emitter.options.loops : \"∞\"),\r\n                // Show the amount of particle contained.\r\n                \"\\u03A3p: \" + emitter.particles.length,\r\n                // Show the internal timer.\r\n                !emitter.isExpired\r\n                    ? \"\\u03A3t: \" + emitter[\"durationTimer\"].toFixed(3) + \"s\"\r\n                    : \"<i>expired</i>\",\r\n            ].join(\", \");\r\n        });\r\n        infos.push.apply(infos, __spreadArray([\"--------------\"], emitterInfos));\r\n        return infos;\r\n    };\r\n    return Debug;\r\n}());\r\nexports.Debug = Debug;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}