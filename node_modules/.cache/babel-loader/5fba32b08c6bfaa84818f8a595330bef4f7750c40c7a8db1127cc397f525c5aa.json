{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Scene = void 0;\nvar debug_1 = require(\"./debug\");\nvar emitter_1 = require(\"./particles/emitter\");\nvar renderer_1 = require(\"./particles/renderer\");\n/**\r\n * Represents a scene that contains emitters and their particles.\r\n *\r\n * Scenes are responsible for spawning and updating emitters, and\r\n * removing them once they are done.\r\n *\r\n * Scenes are not explicitely present in the DOM as an element, only\r\n * the contained particles are.\r\n */\nvar Scene = /** @class */function () {\n  /**\r\n   * Initializes a new scene and starts the ticking job.\r\n   */\n  function Scene() {\n    /**\r\n     * The emitters currently present in the scene.\r\n     */\n    this.emitters = [];\n    /**\r\n     * The debug instance associated with the scene.\r\n     */\n    this.debug = new debug_1.Debug(this);\n    /**\r\n     * The renderer associated with the scene.\r\n     */\n    this.renderer = new renderer_1.Renderer();\n    /**\r\n     * The ID of the currently scheduled tick.\r\n     */\n    this.scheduledTickId = undefined;\n    /**\r\n     * The timestamp of the last tick, used to calculate deltas.\r\n     *\r\n     * @initialValue `performance.now()` (time origin)\r\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMHighResTimeStamp\r\n     */\n    this.lastTickTimestamp = performance.now();\n    // Ensure the scene context is preserved on the tick.\n    this.tick = this.tick.bind(this);\n    this.scheduleTick();\n  }\n  /**\r\n   * Creates and returns a new, default emitter object.\r\n   */\n  Scene.prototype.createEmitter = function (options) {\n    var emitter = new emitter_1.Emitter(options);\n    this.emitters.push(emitter);\n    return emitter;\n  };\n  /**\r\n   * Clears all emitters from the scene.\r\n   *\r\n   * @returns The number of cleared emitters.\r\n   */\n  Scene.prototype.clearEmitters = function () {\n    return this.emitters.splice(0).length;\n  };\n  /**\r\n   * Clears the particles from all emitters in the scene.\r\n   * Note that this does not remove the actual emitter objects though.\r\n   *\r\n   * @returns The number of cleared particles.\r\n   */\n  Scene.prototype.clearParticles = function () {\n    return this.emitters.reduce(function (sum, emitter) {\n      return sum + emitter.clearParticles();\n    }, 0);\n  };\n  /**\r\n   * Schedules a tick in the scene.\r\n   */\n  Scene.prototype.scheduleTick = function () {\n    this.scheduledTickId = window.requestAnimationFrame(this.tick);\n  };\n  /**\r\n   * Cancels a pending tick operation.\r\n   */\n  Scene.prototype.cancelTick = function () {\n    window.cancelAnimationFrame(this.scheduledTickId);\n  };\n  /**\r\n   * Processes a tick cycle, updating all emitters contained in the scene.\r\n   * This is handled as a JS animation frame event, hence the passed timestamp.\r\n   *\r\n   * @remarks\r\n   * The emitter ticking and particle rendering is run using try-catch blocks,\r\n   * to ensure that we can recover from potential errors.\r\n   *\r\n   * @param timestamp The current timestamp of the animation frame.\r\n   */\n  Scene.prototype.tick = function (timestamp) {\n    // Calculate the elapsed delta and convert it to seconds.\n    var delta = (timestamp - this.lastTickTimestamp) / 1000;\n    try {\n      // Perform ticks for all the emitters in the scene.\n      for (var i = 0; i < this.emitters.length; i++) {\n        var emitter = this.emitters[i];\n        emitter.tick(delta);\n        if (emitter.isExpired && emitter.canRemove) {\n          this.emitters.splice(i--, 1);\n        }\n      }\n    } catch (error) {\n      console.error(\"An error occurred while updating the scene's emitters:\\n\\\"\" + error + \"\\\"\");\n    }\n    try {\n      // Instruct the renderer to draw the particles of all systems.\n      this.renderer.begin();\n      for (var _i = 0, _a = this.emitters; _i < _a.length; _i++) {\n        var emitter = _a[_i];\n        for (var _b = 0, _c = emitter.particles; _b < _c.length; _b++) {\n          var particle = _c[_b];\n          this.renderer.renderParticle(particle, emitter);\n        }\n      }\n      this.renderer.end();\n    } catch (error) {\n      console.error(\"An error occurred while rendering the scene's particles:\\n\\\"\" + error + \"\\\"\");\n    }\n    // Perform a tick on the debug interface\n    this.debug.tick(delta);\n    // Save the timestamp as the last tick timestamp and schedule a new tick.\n    this.lastTickTimestamp = timestamp;\n    this.scheduleTick();\n  };\n  return Scene;\n}();\nexports.Scene = Scene;","map":{"version":3,"names":["Object","defineProperty","exports","value","Scene","debug_1","require","emitter_1","renderer_1","emitters","debug","Debug","renderer","Renderer","scheduledTickId","undefined","lastTickTimestamp","performance","now","tick","bind","scheduleTick","prototype","createEmitter","options","emitter","Emitter","push","clearEmitters","splice","length","clearParticles","reduce","sum","window","requestAnimationFrame","cancelTick","cancelAnimationFrame","timestamp","delta","i","isExpired","canRemove","error","console","begin","_i","_a","_b","_c","particles","particle","renderParticle","end"],"sources":["C:/works/react-test/node_modules/party-js/lib/scene.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Scene = void 0;\r\nvar debug_1 = require(\"./debug\");\r\nvar emitter_1 = require(\"./particles/emitter\");\r\nvar renderer_1 = require(\"./particles/renderer\");\r\n/**\r\n * Represents a scene that contains emitters and their particles.\r\n *\r\n * Scenes are responsible for spawning and updating emitters, and\r\n * removing them once they are done.\r\n *\r\n * Scenes are not explicitely present in the DOM as an element, only\r\n * the contained particles are.\r\n */\r\nvar Scene = /** @class */ (function () {\r\n    /**\r\n     * Initializes a new scene and starts the ticking job.\r\n     */\r\n    function Scene() {\r\n        /**\r\n         * The emitters currently present in the scene.\r\n         */\r\n        this.emitters = [];\r\n        /**\r\n         * The debug instance associated with the scene.\r\n         */\r\n        this.debug = new debug_1.Debug(this);\r\n        /**\r\n         * The renderer associated with the scene.\r\n         */\r\n        this.renderer = new renderer_1.Renderer();\r\n        /**\r\n         * The ID of the currently scheduled tick.\r\n         */\r\n        this.scheduledTickId = undefined;\r\n        /**\r\n         * The timestamp of the last tick, used to calculate deltas.\r\n         *\r\n         * @initialValue `performance.now()` (time origin)\r\n         * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMHighResTimeStamp\r\n         */\r\n        this.lastTickTimestamp = performance.now();\r\n        // Ensure the scene context is preserved on the tick.\r\n        this.tick = this.tick.bind(this);\r\n        this.scheduleTick();\r\n    }\r\n    /**\r\n     * Creates and returns a new, default emitter object.\r\n     */\r\n    Scene.prototype.createEmitter = function (options) {\r\n        var emitter = new emitter_1.Emitter(options);\r\n        this.emitters.push(emitter);\r\n        return emitter;\r\n    };\r\n    /**\r\n     * Clears all emitters from the scene.\r\n     *\r\n     * @returns The number of cleared emitters.\r\n     */\r\n    Scene.prototype.clearEmitters = function () {\r\n        return this.emitters.splice(0).length;\r\n    };\r\n    /**\r\n     * Clears the particles from all emitters in the scene.\r\n     * Note that this does not remove the actual emitter objects though.\r\n     *\r\n     * @returns The number of cleared particles.\r\n     */\r\n    Scene.prototype.clearParticles = function () {\r\n        return this.emitters.reduce(function (sum, emitter) { return sum + emitter.clearParticles(); }, 0);\r\n    };\r\n    /**\r\n     * Schedules a tick in the scene.\r\n     */\r\n    Scene.prototype.scheduleTick = function () {\r\n        this.scheduledTickId = window.requestAnimationFrame(this.tick);\r\n    };\r\n    /**\r\n     * Cancels a pending tick operation.\r\n     */\r\n    Scene.prototype.cancelTick = function () {\r\n        window.cancelAnimationFrame(this.scheduledTickId);\r\n    };\r\n    /**\r\n     * Processes a tick cycle, updating all emitters contained in the scene.\r\n     * This is handled as a JS animation frame event, hence the passed timestamp.\r\n     *\r\n     * @remarks\r\n     * The emitter ticking and particle rendering is run using try-catch blocks,\r\n     * to ensure that we can recover from potential errors.\r\n     *\r\n     * @param timestamp The current timestamp of the animation frame.\r\n     */\r\n    Scene.prototype.tick = function (timestamp) {\r\n        // Calculate the elapsed delta and convert it to seconds.\r\n        var delta = (timestamp - this.lastTickTimestamp) / 1000;\r\n        try {\r\n            // Perform ticks for all the emitters in the scene.\r\n            for (var i = 0; i < this.emitters.length; i++) {\r\n                var emitter = this.emitters[i];\r\n                emitter.tick(delta);\r\n                if (emitter.isExpired && emitter.canRemove) {\r\n                    this.emitters.splice(i--, 1);\r\n                }\r\n            }\r\n        }\r\n        catch (error) {\r\n            console.error(\"An error occurred while updating the scene's emitters:\\n\\\"\" + error + \"\\\"\");\r\n        }\r\n        try {\r\n            // Instruct the renderer to draw the particles of all systems.\r\n            this.renderer.begin();\r\n            for (var _i = 0, _a = this.emitters; _i < _a.length; _i++) {\r\n                var emitter = _a[_i];\r\n                for (var _b = 0, _c = emitter.particles; _b < _c.length; _b++) {\r\n                    var particle = _c[_b];\r\n                    this.renderer.renderParticle(particle, emitter);\r\n                }\r\n            }\r\n            this.renderer.end();\r\n        }\r\n        catch (error) {\r\n            console.error(\"An error occurred while rendering the scene's particles:\\n\\\"\" + error + \"\\\"\");\r\n        }\r\n        // Perform a tick on the debug interface\r\n        this.debug.tick(delta);\r\n        // Save the timestamp as the last tick timestamp and schedule a new tick.\r\n        this.lastTickTimestamp = timestamp;\r\n        this.scheduleTick();\r\n    };\r\n    return Scene;\r\n}());\r\nexports.Scene = Scene;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}