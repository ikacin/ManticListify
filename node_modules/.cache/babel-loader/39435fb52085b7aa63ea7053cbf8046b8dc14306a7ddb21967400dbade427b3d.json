{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getDefaultRendererOptions = void 0;\n/**\r\n * Returns the default set of renderer options.\r\n */\nfunction getDefaultRendererOptions() {\n  return {\n    shapeFactory: \"square\",\n    applyColor: defaultApplyColor,\n    applyOpacity: defaultApplyOpacity,\n    applyLighting: defaultApplyLighting,\n    applyTransform: defaultApplyTransform\n  };\n}\nexports.getDefaultRendererOptions = getDefaultRendererOptions;\n/**\r\n * Applies the specified color to the element.\r\n *\r\n * @remarks\r\n * This function is aware of the element's node type:\r\n * - `div` elements have their `background` set.\r\n * - `svg` elements have their `fill` and `color` set.\r\n * - Other elements have their `color` set.\r\n */\nfunction defaultApplyColor(color, element) {\n  var hex = color.toHex();\n  // Note that by default, HTML node names are uppercase.\n  switch (element.nodeName.toLowerCase()) {\n    case \"div\":\n      element.style.background = hex;\n      break;\n    case \"svg\":\n      element.style.fill = element.style.color = hex;\n      break;\n    default:\n      element.style.color = hex;\n      break;\n  }\n}\n/**\r\n * Applies the specified opacity to the element.\r\n */\nfunction defaultApplyOpacity(opacity, element) {\n  element.style.opacity = opacity.toString();\n}\n/**\r\n * Applies the specified lighting to the element as a brightness filter.\r\n *\r\n * @remarks\r\n * This function assumes an ambient light with intensity 0.5, and that the\r\n * particle should be lit from both sides. The brightness filter can exceed 1,\r\n * to give the particles a \"glossy\" feel.\r\n */\nfunction defaultApplyLighting(lighting, element) {\n  element.style.filter = \"brightness(\" + (0.5 + Math.abs(lighting)) + \")\";\n}\n/**\r\n * Applies the specified transform to the element as a 3D CSS transform.\r\n * Also takes into account the current window scroll, to make sure that particles are\r\n * rendered inside of the fixed container.\r\n */\nfunction defaultApplyTransform(particle, element) {\n  element.style.transform =\n  // Make sure to take window scrolling into account.\n  \"translateX(\" + (particle.location.x - window.scrollX).toFixed(3) + \"px) \" + (\"translateY(\" + (particle.location.y - window.scrollY).toFixed(3) + \"px) \") + (\"translateZ(\" + particle.location.z.toFixed(3) + \"px) \") + (\"rotateX(\" + particle.rotation.x.toFixed(3) + \"deg) \") + (\"rotateY(\" + particle.rotation.y.toFixed(3) + \"deg) \") + (\"rotateZ(\" + particle.rotation.z.toFixed(3) + \"deg) \") + (\"scale(\" + particle.size.toFixed(3) + \")\");\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","getDefaultRendererOptions","shapeFactory","applyColor","defaultApplyColor","applyOpacity","defaultApplyOpacity","applyLighting","defaultApplyLighting","applyTransform","defaultApplyTransform","color","element","hex","toHex","nodeName","toLowerCase","style","background","fill","opacity","toString","lighting","filter","Math","abs","particle","transform","location","x","window","scrollX","toFixed","y","scrollY","z","rotation","size"],"sources":["C:/works/react-test/node_modules/party-js/lib/particles/options/renderOptions.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.getDefaultRendererOptions = void 0;\r\n/**\r\n * Returns the default set of renderer options.\r\n */\r\nfunction getDefaultRendererOptions() {\r\n    return {\r\n        shapeFactory: \"square\",\r\n        applyColor: defaultApplyColor,\r\n        applyOpacity: defaultApplyOpacity,\r\n        applyLighting: defaultApplyLighting,\r\n        applyTransform: defaultApplyTransform,\r\n    };\r\n}\r\nexports.getDefaultRendererOptions = getDefaultRendererOptions;\r\n/**\r\n * Applies the specified color to the element.\r\n *\r\n * @remarks\r\n * This function is aware of the element's node type:\r\n * - `div` elements have their `background` set.\r\n * - `svg` elements have their `fill` and `color` set.\r\n * - Other elements have their `color` set.\r\n */\r\nfunction defaultApplyColor(color, element) {\r\n    var hex = color.toHex();\r\n    // Note that by default, HTML node names are uppercase.\r\n    switch (element.nodeName.toLowerCase()) {\r\n        case \"div\":\r\n            element.style.background = hex;\r\n            break;\r\n        case \"svg\":\r\n            element.style.fill = element.style.color = hex;\r\n            break;\r\n        default:\r\n            element.style.color = hex;\r\n            break;\r\n    }\r\n}\r\n/**\r\n * Applies the specified opacity to the element.\r\n */\r\nfunction defaultApplyOpacity(opacity, element) {\r\n    element.style.opacity = opacity.toString();\r\n}\r\n/**\r\n * Applies the specified lighting to the element as a brightness filter.\r\n *\r\n * @remarks\r\n * This function assumes an ambient light with intensity 0.5, and that the\r\n * particle should be lit from both sides. The brightness filter can exceed 1,\r\n * to give the particles a \"glossy\" feel.\r\n */\r\nfunction defaultApplyLighting(lighting, element) {\r\n    element.style.filter = \"brightness(\" + (0.5 + Math.abs(lighting)) + \")\";\r\n}\r\n/**\r\n * Applies the specified transform to the element as a 3D CSS transform.\r\n * Also takes into account the current window scroll, to make sure that particles are\r\n * rendered inside of the fixed container.\r\n */\r\nfunction defaultApplyTransform(particle, element) {\r\n    element.style.transform =\r\n        // Make sure to take window scrolling into account.\r\n        \"translateX(\" + (particle.location.x - window.scrollX).toFixed(3) + \"px) \" +\r\n            (\"translateY(\" + (particle.location.y - window.scrollY).toFixed(3) + \"px) \") +\r\n            (\"translateZ(\" + particle.location.z.toFixed(3) + \"px) \") +\r\n            (\"rotateX(\" + particle.rotation.x.toFixed(3) + \"deg) \") +\r\n            (\"rotateY(\" + particle.rotation.y.toFixed(3) + \"deg) \") +\r\n            (\"rotateZ(\" + particle.rotation.z.toFixed(3) + \"deg) \") +\r\n            (\"scale(\" + particle.size.toFixed(3) + \")\");\r\n}\r\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,yBAAyB,GAAG,KAAK,CAAC;AAC1C;AACA;AACA;AACA,SAASA,yBAAyBA,CAAA,EAAG;EACjC,OAAO;IACHC,YAAY,EAAE,QAAQ;IACtBC,UAAU,EAAEC,iBAAiB;IAC7BC,YAAY,EAAEC,mBAAmB;IACjCC,aAAa,EAAEC,oBAAoB;IACnCC,cAAc,EAAEC;EACpB,CAAC;AACL;AACAX,OAAO,CAACE,yBAAyB,GAAGA,yBAAyB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASG,iBAAiBA,CAACO,KAAK,EAAEC,OAAO,EAAE;EACvC,IAAIC,GAAG,GAAGF,KAAK,CAACG,KAAK,CAAC,CAAC;EACvB;EACA,QAAQF,OAAO,CAACG,QAAQ,CAACC,WAAW,CAAC,CAAC;IAClC,KAAK,KAAK;MACNJ,OAAO,CAACK,KAAK,CAACC,UAAU,GAAGL,GAAG;MAC9B;IACJ,KAAK,KAAK;MACND,OAAO,CAACK,KAAK,CAACE,IAAI,GAAGP,OAAO,CAACK,KAAK,CAACN,KAAK,GAAGE,GAAG;MAC9C;IACJ;MACID,OAAO,CAACK,KAAK,CAACN,KAAK,GAAGE,GAAG;MACzB;EACR;AACJ;AACA;AACA;AACA;AACA,SAASP,mBAAmBA,CAACc,OAAO,EAAER,OAAO,EAAE;EAC3CA,OAAO,CAACK,KAAK,CAACG,OAAO,GAAGA,OAAO,CAACC,QAAQ,CAAC,CAAC;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASb,oBAAoBA,CAACc,QAAQ,EAAEV,OAAO,EAAE;EAC7CA,OAAO,CAACK,KAAK,CAACM,MAAM,GAAG,aAAa,IAAI,GAAG,GAAGC,IAAI,CAACC,GAAG,CAACH,QAAQ,CAAC,CAAC,GAAG,GAAG;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA,SAASZ,qBAAqBA,CAACgB,QAAQ,EAAEd,OAAO,EAAE;EAC9CA,OAAO,CAACK,KAAK,CAACU,SAAS;EACnB;EACA,aAAa,GAAG,CAACD,QAAQ,CAACE,QAAQ,CAACC,CAAC,GAAGC,MAAM,CAACC,OAAO,EAAEC,OAAO,CAAC,CAAC,CAAC,GAAG,MAAM,IACrE,aAAa,GAAG,CAACN,QAAQ,CAACE,QAAQ,CAACK,CAAC,GAAGH,MAAM,CAACI,OAAO,EAAEF,OAAO,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,IAC3E,aAAa,GAAGN,QAAQ,CAACE,QAAQ,CAACO,CAAC,CAACH,OAAO,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,IACxD,UAAU,GAAGN,QAAQ,CAACU,QAAQ,CAACP,CAAC,CAACG,OAAO,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,IACtD,UAAU,GAAGN,QAAQ,CAACU,QAAQ,CAACH,CAAC,CAACD,OAAO,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,IACtD,UAAU,GAAGN,QAAQ,CAACU,QAAQ,CAACD,CAAC,CAACH,OAAO,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,IACtD,QAAQ,GAAGN,QAAQ,CAACW,IAAI,CAACL,OAAO,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;AACvD"},"metadata":{},"sourceType":"script","externalDependencies":[]}